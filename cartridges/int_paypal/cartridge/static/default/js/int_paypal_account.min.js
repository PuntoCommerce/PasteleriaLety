/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./cartridges/int_paypal/cartridge/client/default/js/account/account.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./cartridges/int_paypal/cartridge/client/default/js/account/account.js":
/*!******************************************************************************!*\
  !*** ./cartridges/int_paypal/cartridge/client/default/js/account/account.js ***!
  \******************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _initBillingAgreementButton__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./initBillingAgreementButton */ "./cartridges/int_paypal/cartridge/client/default/js/account/initBillingAgreementButton.js");


var loaderInstance = __webpack_require__(/*! ../loader */ "./cartridges/int_paypal/cartridge/client/default/js/loader.js");

var $loaderContainer = document.querySelector('.paypalLoader');
var loader = loaderInstance($loaderContainer);
var $paypalAccountBtn = document.querySelector('.paypal-account-button');
var $addNewAccountBtn = document.querySelector('.add-paypal-account');
var $paypalBlock = document.querySelector('.paypal-block');
var $limitMsg = document.querySelector('.limitMsg');
var paypalUrls = $paypalAccountBtn && $paypalAccountBtn.getAttribute('data-paypal-urls');
window.paypalUrls = JSON.parse(paypalUrls);

if ($addNewAccountBtn && $paypalAccountBtn) {
  var isBaLimitReached = JSON.parse($paypalAccountBtn.getAttribute('data-paypal-is-ba-limit-reached'));

  $addNewAccountBtn.onclick = function () {
    if (window.paypal && $paypalAccountBtn.innerHTML === '' && !isBaLimitReached) {
      Object(_initBillingAgreementButton__WEBPACK_IMPORTED_MODULE_0__["default"])();
    } else if (isBaLimitReached) {
      $limitMsg.style.display = 'block';
    }
  };
}

if ($paypalBlock) {
  $paypalBlock.onclick = function (e) {
    var target = e.target;

    if (target.classList.contains('remove-paypal-button')) {
      var baEmail = target.dataset.billingAgreementEmail;
      loader.show();
      return $.ajax({
        url: window.paypalUrls.removeBillingAgreement + "?billingAgreementEmail=".concat(baEmail),
        type: 'DELETE'
      }).then(function () {
        loader.hide();
        location.reload();
      }).fail(function () {
        loader.hide();
      });
    }
  };
}

/***/ }),

/***/ "./cartridges/int_paypal/cartridge/client/default/js/account/initBillingAgreementButton.js":
/*!*************************************************************************************************!*\
  !*** ./cartridges/int_paypal/cartridge/client/default/js/account/initBillingAgreementButton.js ***!
  \*************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../api */ "./cartridges/int_paypal/cartridge/client/default/js/api.js");


var loaderInstance = __webpack_require__(/*! ../loader */ "./cartridges/int_paypal/cartridge/client/default/js/loader.js");

var $loaderContainer = document.querySelector('.paypalLoader');
var loader = loaderInstance($loaderContainer);
/**
 *  Creates Billing Agreement
 *
 * @returns {string} returns JSON response that includes an data token
 */

function createBillingAgreement() {
  loader.show();
  var isCartFlow = true;
  return Object(_api__WEBPACK_IMPORTED_MODULE_0__["getBillingAgreementToken"])(isCartFlow).then(function (data) {
    return data.token;
  }).fail(function () {
    loader.hide();
  });
}
/**
 *  Makes post call using facilitator Access Token and transfers billingToken
 *  send baID & email to saveBillingAgreement endpoint
 *
 * @param {string} billingToken - billing agreement token
 * @returns {Object} JSON response that includes the billing agreement ID and information about the payer
 */


function onApprove(_ref) {
  var billingToken = _ref.billingToken;
  return Object(_api__WEBPACK_IMPORTED_MODULE_0__["createBillingAgreementCall"])(billingToken).then(function (_ref2) {
    var id = _ref2.id,
        payer = _ref2.payer;
    var email = payer.payer_info.email;
    return $.ajax({
      url: window.paypalUrls.saveBillingAgreement,
      type: 'POST',
      contentType: 'application/json',
      data: JSON.stringify({
        baID: id,
        email: email
      })
    });
  }).then(function () {
    loader.hide();
    location.reload();
  }).fail(function () {
    loader.hide();
  });
}
/**
 * Hides loader on paypal widget closing without errors

 */


function onCancel() {
  loader.hide();
}
/**
 * Shows errors if paypal widget was closed with errors
 *
 */


function onError() {
  loader.hide();
}
/**
 *Inits paypal Billing Agreement button on billing checkout page
 */


function initPaypalBAButton() {
  loader.show();
  window.paypal.Buttons({
    createBillingAgreement: createBillingAgreement,
    onApprove: onApprove,
    onCancel: onCancel,
    onError: onError
  }).render('.paypal-account-button').then(function () {
    loader.hide();
  });
}

/* harmony default export */ __webpack_exports__["default"] = (initPaypalBAButton);

/***/ }),

/***/ "./cartridges/int_paypal/cartridge/client/default/js/api.js":
/*!******************************************************************!*\
  !*** ./cartridges/int_paypal/cartridge/client/default/js/api.js ***!
  \******************************************************************/
/*! exports provided: updateOrderData, getPurchaseUnits, getBillingAgreementToken, createBillingAgreementCall, returnFromCart, showCartErrorHtml, showCheckoutErrorHtml, finishLpmOrder, createCartBillingFormData */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "updateOrderData", function() { return updateOrderData; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getPurchaseUnits", function() { return getPurchaseUnits; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getBillingAgreementToken", function() { return getBillingAgreementToken; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createBillingAgreementCall", function() { return createBillingAgreementCall; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "returnFromCart", function() { return returnFromCart; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "showCartErrorHtml", function() { return showCartErrorHtml; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "showCheckoutErrorHtml", function() { return showCheckoutErrorHtml; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "finishLpmOrder", function() { return finishLpmOrder; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createCartBillingFormData", function() { return createCartBillingFormData; });
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var loaderInstance = __webpack_require__(/*! ./loader */ "./cartridges/int_paypal/cartridge/client/default/js/loader.js");

var $loaderContainer = document.querySelector('.paypalLoader');
var loader = loaderInstance($loaderContainer);
/**
 *  Appends error message on cart page
 *
 * @param {string} message error message
 */

function showCartErrorHtml(message) {
  $('.checkout-btn').addClass('disabled');
  $('.cart-error').append("<div class=\"alert alert-danger alert-dismissible valid-cart-error fade show cartError\" role=\"alert\">\n            <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">\n                <span aria-hidden=\"true\">&times;</span>\n            </button>\n            ".concat(message, "\n        </div>"));
  window.scrollTo(0, 0);
}
/**
 *  Appends error message on billing checkout page
 *
 * @param {string} message error message
 */


function showCheckoutErrorHtml(message) {
  document.querySelector('.error-message-text').textContent = '';
  document.querySelector('.error-message').style.display = 'block';
  document.querySelector('.error-message-text').append(message);
  window.scrollTo(0, 0);
}
/**
 * Updates information about an order
 *
 * @returns {Object} Call handling result
 */


function updateOrderData() {
  loader.show();
  return $.ajax({
    url: window.paypalUrls.updateOrderData + '?isCartFlow=true',
    type: 'PATCH',
    success: function success() {
      loader.hide();
      window.location.href = window.paypalUrls.placeOrderStage;
    },
    error: function error(err) {
      loader.hide();
      var error = JSON.parse(err.responseText);
      showCartErrorHtml(error.errorMsg);

      if (error.transactionExpired) {
        location.reload();
      }
    }
  });
}
/**
 * Gets purchase units
 *
 * @returns {Object} with purchase units data
 */


function getPurchaseUnits() {
  return $.get(window.paypalUrls.getPurchaseUnit).then(function (_ref) {
    var purchase_units = _ref.purchase_units;
    return purchase_units;
  });
}
/**
 * Gets Billing Agreement Token
 *
 * @param {boolean} isCartFlow - billing agreement flow from cart
 * @returns {string} billingToken - returns a JSON response that includes token, an approval URL
 */


function getBillingAgreementToken() {
  var isCartFlow = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  return $.get(window.paypalUrls.createBillingAgreementToken + "?isCartFlow=".concat(isCartFlow)).then(function (data) {
    return data;
  });
}
/**
 * Gets Billing Agreement
 * After buyer approval, you use a billing agreement token to create the agreement.
 *
 * @param {string} billingToken - billing agreement token
 * @returns {Object} JSON response body that includes the billing agreement ID,
 * the state of the agreement, which is ACTIVE, and information about the payer
 */


function createBillingAgreementCall(billingToken) {
  return $.ajax({
    url: window.paypalUrls.createBillingAgreement,
    type: 'POST',
    contentType: 'application/json',
    data: JSON.stringify({
      billingToken: billingToken
    })
  });
}
/**
 * Create billing formData from fields data
 *
 * @param {Object} fieldsData - fields data values
 * @param {Elemtn} $paypalButton - paypal button selector
 * @returns {Object} cart billing form data
 */


function createCartBillingFormData(fieldsData, $paypalButton) {
  var cartBillingFormData = new FormData();

  if (!$paypalButton) {
    $paypalButton = document.querySelector('#paypal_pdp_image') || document.querySelector('#paypal_image') || document.querySelector('#venmo_image');
  }

  var cartBillingFields = $paypalButton && JSON.parse($paypalButton.getAttribute('data-paypal-billing-form-fields'));
  Object.entries(cartBillingFields).forEach(function (entry) {
    var _entry = _slicedToArray(entry, 2),
        key = _entry[0],
        field = _entry[1];

    if (_typeof(field) === 'object') {
      cartBillingFormData.append(field.name, fieldsData && fieldsData[key] ? fieldsData[key] : field.value);
    }
  });
  return cartBillingFormData;
}
/**
 * Calls to returnFromCart endpoint, redirects to place order stage or shows error if it exists
 *
 * @returns {Object} Call handling result
 */


function returnFromCart() {
  loader.show();
  var cartBillingFormData = createCartBillingFormData();
  return $.ajax({
    url: window.paypalUrls.returnFromCart,
    type: 'POST',
    contentType: false,
    data: cartBillingFormData,
    processData: false,
    success: function success() {
      loader.hide();
      window.location.href = window.paypalUrls.placeOrderStage;
    },
    error: function error(err) {
      loader.hide();
      showCartErrorHtml(err.responseText);
    }
  });
}
/**
 * Call finishLpmOrder endpoint
 * @param  {Object} details billing address details
 * @returns {Promise} ajax call
 */


function finishLpmOrder(details) {
  var lpmName = document.querySelector('#usedPaymentMethod').value;
  var paypalMethodId = document.querySelector('#paypalMethodId').value;
  return $.ajax({
    url: window.paypalUrls.finishLpmOrder,
    type: 'POST',
    contentType: 'application/json',
    data: JSON.stringify({
      details: details,
      lpmName: lpmName,
      paypalMethodId: paypalMethodId
    })
  });
}



/***/ }),

/***/ "./cartridges/int_paypal/cartridge/client/default/js/loader.js":
/*!*********************************************************************!*\
  !*** ./cartridges/int_paypal/cartridge/client/default/js/loader.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* eslint-disable require-jsdoc */
module.exports = function (containerElement) {
  function Constructor() {
    this.containerEl = containerElement;
  }

  Constructor.prototype.show = function () {
    this.containerEl.style.display = 'block';
  };

  Constructor.prototype.hide = function () {
    this.containerEl.style.display = 'none';
  };

  return new Constructor();
};

/***/ })

/******/ });
//# sourceMappingURL=int_paypal_account.min.js.map